@page "/user-detail"

@inject NavigationManager NavigationManager
@inject IUserService UserServices
@inject IUserProfileService UserProfileServices
@inject IGetProfileDataService GetProfileDataService
@inject LoggedUserService LoggedUserService

<PageTitle>@LoggedUserService.User.Login Detail</PageTitle>

<div class="position-absolute top-50 start-50 translate-middle " style="display: flex; justify-content: center;">
	<div class="card " style="width: 28rem;">

		@if (!valid)
		{
			<img src=@picUrl class="card-img-top" />
		}
		else
		{
			<img src=@picUrl class="card-img-top" />
		}

		<div class="card-body">
			<h2 class="card-title" style="text-align: center;">@user.Login</h2>
		</div>
		<div style="display: flex; justify-content: center;">
			<div>
				<p>Full Name: @userProfile.User.FirstName @userProfile.User.LastName </p>
				<p>User Name: @userProfile.UserName</p>
				<p>Aboutme: @userProfile.AboutMe</p>
				<p>Age: @Age()</p>
				<p>Height: @userProfile.Height</p>
				<p>Location: @userProfile.City.CityName</p>
				<p>Gender: @userProfile.Gender.GenderName</p>
			</div>
		</div>
		<div class="card-body">
			<button type="button" @onclick="(async () => await  LogOut())" class="btn btn-danger">Log Out</button>
			<button type="button" @onclick="(async () => await  NavigateToUpdateUser(user.Id))" class="btn btn-primary">Edit</button>
		</div>
	</div>
</div>

@code {
	public int UserId { get; set; }

	protected UserEntity user;
	protected UserProfileEntity userProfile;
	private string picUrl;
	private bool valid;

	protected string Age()
	{
		var age = DateTime.Now.Year - userProfile.BirthDate.Year;
		return Convert.ToString(age);
	}

	protected override void OnInitialized()
	{
		user = new UserEntity();
		userProfile = new UserProfileEntity();
		UserId = LoggedUserService.User.Id;
		var userList = UserProfileServices.GetAllUserProfiles();
		userProfile = userList.Where(x => x.Id == UserId).FirstOrDefault();

		if (userProfile.ProfilePicture.PicURL == null)
		{
			picUrl = "person-badge.svg";
		}
		else
		{
			picUrl = userProfile.ProfilePicture.PicURL;
			valid = true;
		}
	}

	protected async Task LogOut()
	{
		NavigationManager.NavigateTo("/");
	}

	protected async Task NavigateToUpdateUser(int userId)
	{
		NavigationManager.NavigateTo($"/update-user-detail");
	}
}